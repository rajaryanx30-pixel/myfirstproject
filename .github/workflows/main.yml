name: Ollama with Cloudflared Tunnel (Fixed)
on:
  workflow_dispatch: # run manually
  push:
    branches:
      - main

jobs:
  run-ollama:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      # Install Ollama
      - name: Install Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh | sh
          # Clean up any existing Ollama processes
          sudo systemctl stop ollama || true
          sudo systemctl disable ollama || true
          sudo pkill -9 ollama || true
          
      # SOLUTION 1: Use 0.0.0.0 host with wildcard CORS
      - name: Start Ollama Service (0.0.0.0 + Wildcard CORS)
        run: |
          echo "üöÄ Starting Ollama on 0.0.0.0:11500 with wildcard CORS..."
          # Key fix: Use 0.0.0.0 instead of 127.0.0.1 AND set OLLAMA_ORIGINS to wildcard
          OLLAMA_HOST=0.0.0.0:11500 OLLAMA_ORIGINS="*" nohup ollama serve > ollama.log 2>&1 &
          echo $! > ollama.pid
          
          # Wait for Ollama to be ready
          echo "Waiting for Ollama to start..."
          for i in {1..30}; do
            if curl -s http://0.0.0.0:11500/api/tags > /dev/null 2>&1; then
              echo "‚úÖ Ollama is ready on 0.0.0.0:11500!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "‚ùå Timeout waiting for Ollama to start"
              cat ollama.log
              exit 1
            fi
            sleep 2
          done
          
      # Pull model
      - name: Pull Qwen3 model
        run: |
          export OLLAMA_HOST=0.0.0.0:11500
          ollama pull qwen3:0.6b
          
      # Test Ollama
      - name: Test Ollama
        run: |
          export OLLAMA_HOST=0.0.0.0:11500
          echo "Testing Ollama with a simple prompt..."
          ollama run qwen3:0.6b "Hello, how are you?" || echo "Test failed but continuing..."
          
      # Install cloudflared
      - name: Install Cloudflared
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb
          
      # Start Cloudflared tunnel pointing to 0.0.0.0
      - name: Start Cloudflared Tunnel
        run: |
          echo "Starting Cloudflared tunnel..."
          # Point tunnel to 0.0.0.0:11500 instead of 127.0.0.1:11500
          nohup cloudflared tunnel --url http://0.0.0.0:11500 > cloudflared.log 2>&1 &
          echo $! > cloudflared.pid
          
          # Wait for tunnel URL with timeout
          echo "Waiting for tunnel URL..."
          for i in {1..30}; do
            if grep -q "https://.*trycloudflare.com" cloudflared.log; then
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Timeout waiting for tunnel URL"
              cat cloudflared.log
              exit 1
            fi
            sleep 2
          done
          
          # Extract and display tunnel URL
          TUNNEL_URL=$(grep -o 'https://.*\.trycloudflare\.com' cloudflared.log | head -n 1)
          echo "===========================================" 
          echo "üöÄ TUNNEL IS READY!"
          echo "üîó Tunnel URL: $TUNNEL_URL"
          echo "üì° API Tags: $TUNNEL_URL/api/tags"
          echo "ü§ñ API Generate: $TUNNEL_URL/api/generate"
          echo "==========================================="
          
          # Save URL for later steps
          echo "$TUNNEL_URL" > tunnel_url.txt
          
      # Verify tunnel is working
      - name: Verify Tunnel
        run: |
          TUNNEL_URL=$(cat tunnel_url.txt)
          echo "Verifying tunnel is accessible..."
          
          # Test the /api/tags endpoint through the tunnel
          echo "Testing: $TUNNEL_URL/api/tags"
          if curl -s -H "Accept: application/json" "$TUNNEL_URL/api/tags" > /dev/null; then
            echo "‚úÖ Tunnel is working! API is accessible."
            echo "üìã Available models:"
            curl -s "$TUNNEL_URL/api/tags" | jq . || curl -s "$TUNNEL_URL/api/tags"
          else
            echo "‚ùå Tunnel verification failed"
            echo "üîç Testing direct access to Ollama..."
            curl -s http://0.0.0.0:11500/api/tags || echo "Direct access also failed"
            echo "üìù Cloudflared logs:"
            cat cloudflared.log
            echo "üìù Ollama logs:"
            tail -20 ollama.log
            exit 1
          fi
          
      # Test API generate through tunnel
      - name: Test API Generate
        run: |
          TUNNEL_URL=$(cat tunnel_url.txt)
          echo "üß™ Testing text generation through tunnel..."
          
          # Test generate API
          curl -X POST "$TUNNEL_URL/api/generate" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "qwen3:0.6b",
              "prompt": "Hello, how are you?",
              "stream": false
            }' \
            --max-time 30 \
            --fail || echo "Generation test failed but continuing..."
          
      # Keep services alive with monitoring
      - name: Keep Services Alive
        run: |
          TUNNEL_URL=$(cat tunnel_url.txt)
          echo "üîÑ Keeping services alive for 10 minutes..."
          echo "üîó Access your Ollama instance at: $TUNNEL_URL"
          echo "üìù Example API calls:"
          echo "  curl '$TUNNEL_URL/api/tags'"
          echo "  curl -X POST '$TUNNEL_URL/api/generate' -H 'Content-Type: application/json' -d '{\"model\":\"qwen3:0.6b\",\"prompt\":\"Hello world\",\"stream\":false}'"
          
          # Monitor processes and keep alive
          for i in {1..300}; do  # 300 * 2 seconds = 10 minutes
            # Check if Ollama is still running
            if ! kill -0 $(cat ollama.pid) 2>/dev/null; then
              echo "‚ùå Ollama process died, restarting..."
              OLLAMA_HOST=0.0.0.0:11500 OLLAMA_ORIGINS="*" nohup ollama serve > ollama.log 2>&1 &
              echo $! > ollama.pid
              sleep 5
            fi
            
            # Check if Cloudflared is still running  
            if ! kill -0 $(cat cloudflared.pid) 2>/dev/null; then
              echo "‚ùå Cloudflared process died, restarting..."
              nohup cloudflared tunnel --url http://0.0.0.0:11500 > cloudflared.log 2>&1 &
              echo $! > cloudflared.pid
              sleep 5
            fi
            
            # Health check every 2 minutes
            if [ $((i % 60)) -eq 0 ]; then  
              echo "‚è∞ $((i/30))/10 minutes elapsed - Health check..."
              if curl -s --max-time 5 "$TUNNEL_URL/api/tags" > /dev/null; then
                echo "‚úÖ Services are healthy"
              else
                echo "‚ö†Ô∏è  Health check failed, but services are running"
              fi
            fi
            
            sleep 2
          done
          
          echo "‚úÖ 10 minutes completed!"
          
      # Cleanup
      - name: Cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up processes..."
          [ -f ollama.pid ] && kill $(cat ollama.pid) || true
          [ -f cloudflared.pid ] && kill $(cat cloudflared.pid) || true
          sudo pkill -9 ollama || true
          sudo pkill -9 cloudflared || true
