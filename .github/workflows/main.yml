name: Ollama with Cloudflare Tunnel (Properly Configured)
on:
  workflow_dispatch: # run manually
  push:
    branches:
      - main

jobs:
  run-ollama:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Set reasonable timeout
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: System Setup
        run: |
          echo "üîß Setting up system..."
          sudo apt-get update -qq
          sudo apt-get install -y curl wget jq
          
      # Clean install of Ollama
      - name: Install and Configure Ollama
        run: |
          echo "üì¶ Installing Ollama..."
          
          # Clean up any existing processes
          sudo pkill -9 ollama || true
          sudo systemctl stop ollama || true
          sudo systemctl disable ollama || true
          
          # Install Ollama
          curl -fsSL https://ollama.com/install.sh | sh
          
          # Verify installation
          which ollama || (echo "‚ùå Ollama installation failed" && exit 1)
          ollama --version
          
      # Start Ollama with PROPER Cloudflare Tunnel configuration
      - name: Start Ollama Server (Cloudflare Tunnel Ready)
        run: |
          echo "üöÄ Starting Ollama server with Cloudflare Tunnel configuration..."
          
          # Create logs directory
          mkdir -p logs
          
          # CRITICAL: Configure Ollama for Cloudflare Tunnel access
          # Based on the FAQ: "How can I use Ollama with Cloudflare Tunnel?"
          # We need to bind to localhost and let cloudflared handle the host headers
          export OLLAMA_HOST="localhost:11434"
          
          # CRITICAL: Configure CORS to allow Cloudflare tunnel domains
          # Cloudflare tunnels use *.trycloudflare.com domains
          export OLLAMA_ORIGINS="https://*.trycloudflare.com,http://localhost:11434,http://127.0.0.1:11434"
          
          # Additional performance settings
          export OLLAMA_KEEP_ALIVE="15m"
          export OLLAMA_MAX_LOADED_MODELS="1"
          export OLLAMA_MAX_QUEUE="10"
          
          echo "üîß Ollama Configuration:"
          echo "  OLLAMA_HOST: $OLLAMA_HOST"
          echo "  OLLAMA_ORIGINS: $OLLAMA_ORIGINS"
          
          # Start Ollama in background
          nohup ollama serve > logs/ollama.log 2>&1 &
          echo $! > ollama.pid
          
          # Wait for Ollama to be ready with better error handling
          echo "‚è≥ Waiting for Ollama to initialize..."
          for i in {1..60}; do
            if curl -s -f http://localhost:11434/api/tags > /dev/null 2>&1; then
              echo "‚úÖ Ollama is ready on localhost:11434!"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "‚ùå Ollama failed to start within 2 minutes"
              echo "üìã Ollama logs:"
              cat logs/ollama.log
              exit 1
            fi
            echo "  Attempt $i/60..."
            sleep 2
          done
          
      # Pull and verify model
      - name: Setup Qwen3 Model
        run: |
          echo "üì• Downloading Qwen3 model..."
          export OLLAMA_HOST="localhost:11434"
          
          # Pull model with timeout
          timeout 300 ollama pull qwen3:0.6b || {
            echo "‚ùå Model download failed or timed out"
            echo "üìã Available space:"
            df -h
            echo "üìã Ollama logs:"
            tail -50 logs/ollama.log
            exit 1
          }
          
          echo "‚úÖ Model downloaded successfully"
          
      # Test Ollama locally before exposing
      - name: Test Ollama Locally
        run: |
          echo "üß™ Testing Ollama locally..."
          export OLLAMA_HOST="localhost:11434"
          
          # Test API
          echo "Testing API endpoints..."
          curl -s http://localhost:11434/api/tags | jq . || exit 1
          
          # Test generation with timeout
          echo "Testing text generation..."
          timeout 30 ollama run qwen3:0.6b "Hello! Say 'Hi' back." || {
            echo "‚ùå Local test failed"
            tail -20 logs/ollama.log
            exit 1
          }
          
          echo "‚úÖ Local tests passed"
          
      # Install Cloudflared
      - name: Install Cloudflared
        run: |
          echo "üì¶ Installing Cloudflared..."
          
          # Download and install cloudflared
          wget -q -O cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared.deb || {
            echo "‚ùå Cloudflared installation failed"
            exit 1
          }
          
          # Verify installation
          cloudflared --version
          
      # Start Cloudflare Tunnel with PROPER configuration
      - name: Create Cloudflare Tunnel (With Host Headers)
        run: |
          echo "üåê Creating Cloudflare tunnel with proper host header configuration..."
          
          # CRITICAL: Use the exact configuration from FAQ
          # "How can I use Ollama with Cloudflare Tunnel?"
          # Use --http-host-header to set the correct Host header
          nohup cloudflared tunnel --url http://localhost:11434 --http-host-header="localhost:11434" > logs/cloudflared.log 2>&1 &
          echo $! > cloudflared.pid
          
          echo "üîß Cloudflare Tunnel Configuration:"
          echo "  Target: http://localhost:11434"
          echo "  Host Header: localhost:11434"
          
          # Wait for tunnel URL with better parsing
          echo "‚è≥ Waiting for tunnel to establish..."
          for i in {1..60}; do
            if grep -q "https://.*\.trycloudflare\.com" logs/cloudflared.log; then
              TUNNEL_URL=$(grep -o 'https://[^[:space:]]*\.trycloudflare\.com' logs/cloudflared.log | head -1)
              echo "‚úÖ Tunnel established!"
              echo "üîó Tunnel URL: $TUNNEL_URL"
              echo "$TUNNEL_URL" > tunnel_url.txt
              break
            fi
            if [ $i -eq 60 ]; then
              echo "‚ùå Tunnel failed to establish"
              echo "üìã Cloudflared logs:"
              cat logs/cloudflared.log
              exit 1
            fi
            echo "  Attempt $i/60..."
            sleep 2
          done
          
      # Wait for tunnel to be fully ready with proper CORS testing
      - name: Verify Tunnel Connectivity (with CORS)
        run: |
          TUNNEL_URL=$(cat tunnel_url.txt)
          echo "üîç Verifying tunnel connectivity with CORS headers..."
          echo "Testing URL: $TUNNEL_URL"
          
          # Wait for tunnel to be fully accessible with CORS headers
          for i in {1..40}; do
            # Test with proper CORS headers that match our OLLAMA_ORIGINS
            if curl -s -f --max-time 10 \
                -H "Origin: $TUNNEL_URL" \
                -H "Access-Control-Request-Method: GET" \
                "$TUNNEL_URL/api/tags" > /dev/null 2>&1; then
              echo "‚úÖ Tunnel is fully accessible with CORS!"
              break
            fi
            if [ $i -eq 40 ]; then
              echo "‚ùå Tunnel accessibility timeout"
              echo "üìã Testing without CORS headers:"
              curl -v "$TUNNEL_URL/api/tags" || echo "Failed"
              echo "üìã Direct Ollama test:"
              curl -s http://localhost:11434/api/tags || echo "Direct access failed"
              echo "üìã Cloudflared logs:"
              tail -30 logs/cloudflared.log
              echo "üìã Ollama logs:"
              tail -20 logs/ollama.log
              exit 1
            fi
            echo "  Waiting for tunnel accessibility... $i/40"
            sleep 5
          done
          
      # Comprehensive API Testing with CORS
      - name: Test API Through Tunnel (with CORS)
        run: |
          TUNNEL_URL=$(cat tunnel_url.txt)
          echo "üß™ Testing API through tunnel with proper headers..."
          
          # Test 1: List models with CORS
          echo "Test 1: Listing available models..."
          curl -s -f \
            -H "Origin: $TUNNEL_URL" \
            -H "Content-Type: application/json" \
            "$TUNNEL_URL/api/tags" | jq . || {
            echo "‚ùå Models API test failed"
            echo "üìã Trying without CORS headers:"
            curl -v "$TUNNEL_URL/api/tags"
            exit 1
          }
          
          # Test 2: Generate text (non-streaming) with CORS
          echo "Test 2: Testing text generation (non-streaming)..."
          curl -s -f -X POST "$TUNNEL_URL/api/generate" \
            -H "Content-Type: application/json" \
            -H "Origin: $TUNNEL_URL" \
            -d '{
              "model": "qwen3:0.6b",
              "prompt": "Say hello in one word:",
              "stream": false
            }' \
            --max-time 45 | jq . || {
            echo "‚ùå Generation API test failed"
            exit 1
          }
          
          # Test 3: Chat API with CORS
          echo "Test 3: Testing chat API..."
          curl -s -f -X POST "$TUNNEL_URL/api/chat" \
            -H "Content-Type: application/json" \
            -H "Origin: $TUNNEL_URL" \
            -d '{
              "model": "qwen3:0.6b",
              "messages": [{"role": "user", "content": "Hi"}],
              "stream": false
            }' \
            --max-time 45 | jq . || {
            echo "‚ùå Chat API test failed"
            exit 1
          }
          
          echo "‚úÖ All API tests passed!"
          
      # Display connection information
      - name: Display Connection Info
        run: |
          TUNNEL_URL=$(cat tunnel_url.txt)
          echo ""
          echo "üéâ OLLAMA IS NOW PUBLICLY ACCESSIBLE!"
          echo "==========================================="
          echo "üîó Tunnel URL: $TUNNEL_URL"
          echo ""
          echo "üì° API Endpoints:"
          echo "  ‚Ä¢ List Models:    GET  $TUNNEL_URL/api/tags"
          echo "  ‚Ä¢ Generate Text:  POST $TUNNEL_URL/api/generate"
          echo "  ‚Ä¢ Chat:           POST $TUNNEL_URL/api/chat"
          echo ""
          echo "üß™ Example cURL commands:"
          echo "  # List models"
          echo "  curl '$TUNNEL_URL/api/tags'"
          echo ""
          echo "  # Generate text"
          echo "  curl -X POST '$TUNNEL_URL/api/generate' \\"
          echo "    -H 'Content-Type: application/json' \\"
          echo "    -d '{\"model\":\"qwen3:0.6b\",\"prompt\":\"Hello world!\",\"stream\":false}'"
          echo ""
          echo "  # Chat"
          echo "  curl -X POST '$TUNNEL_URL/api/chat' \\"
          echo "    -H 'Content-Type: application/json' \\"
          echo "    -d '{\"model\":\"qwen3:0.6b\",\"messages\":[{\"role\":\"user\",\"content\":\"Hello!\"}],\"stream\":false}'"
          echo ""
          echo "üîß CORS Configuration:"
          echo "  Ollama is configured to accept requests from *.trycloudflare.com"
          echo "  Host header is properly forwarded by cloudflared"
          echo "==========================================="
          
      # Keep services alive with health monitoring
      - name: Keep Services Alive with CORS Monitoring
        run: |
          TUNNEL_URL=$(cat tunnel_url.txt)
          echo "üîÑ Monitoring services for 12 minutes..."
          
          # Function to check if process is running
          check_process() {
            local pid_file=$1
            local name=$2
            if [ -f "$pid_file" ] && kill -0 $(cat "$pid_file") 2>/dev/null; then
              return 0
            else
              echo "‚ö†Ô∏è  $name process is not running"
              return 1
            fi
          }
          
          # Function to restart Ollama with proper CORS config
          restart_ollama() {
            echo "üîÑ Restarting Ollama with CORS configuration..."
            kill $(cat ollama.pid) 2>/dev/null || true
            export OLLAMA_HOST="localhost:11434"
            export OLLAMA_ORIGINS="https://*.trycloudflare.com,http://localhost:11434,http://127.0.0.1:11434"
            export OLLAMA_KEEP_ALIVE="15m"
            nohup ollama serve > logs/ollama.log 2>&1 &
            echo $! > ollama.pid
            sleep 15
          }
          
          # Function to restart tunnel with host headers
          restart_tunnel() {
            echo "üîÑ Restarting tunnel with host header configuration..."
            kill $(cat cloudflared.pid) 2>/dev/null || true
            nohup cloudflared tunnel --url http://localhost:11434 --http-host-header="localhost:11434" > logs/cloudflared.log 2>&1 &
            echo $! > cloudflared.pid
            sleep 20
          }
          
          # Monitor for 12 minutes (360 * 2 seconds)
          for i in {1..360}; do
            # Check processes every 30 seconds
            if [ $((i % 15)) -eq 0 ]; then
              if ! check_process ollama.pid "Ollama"; then
                restart_ollama
              fi
              
              if ! check_process cloudflared.pid "Cloudflared"; then
                restart_tunnel
              fi
            fi
            
            # Health check every 2 minutes with CORS
            if [ $((i % 60)) -eq 0 ]; then
              minutes_elapsed=$((i / 30))
              echo "‚è∞ $minutes_elapsed/12 minutes elapsed - CORS Health check..."
              
              if curl -s -f --max-time 10 \
                  -H "Origin: $TUNNEL_URL" \
                  "$TUNNEL_URL/api/tags" > /dev/null 2>&1; then
                model_count=$(curl -s -H "Origin: $TUNNEL_URL" "$TUNNEL_URL/api/tags" | jq '.models | length' 2>/dev/null || echo "0")
                echo "‚úÖ Services healthy with CORS - $model_count model(s) available"
              else
                echo "‚ö†Ô∏è  CORS Health check failed - testing without CORS..."
                if curl -s -f --max-time 10 "$TUNNEL_URL/api/tags" > /dev/null 2>&1; then
                  echo "‚ö†Ô∏è  Tunnel works but CORS may be failing"
                else
                  echo "‚ùå Complete tunnel failure"
                fi
                echo "üìã Last few Ollama log lines:"
                tail -3 logs/ollama.log
              fi
            fi
            
            # Show countdown every 2 minutes
            if [ $((i % 60)) -eq 0 ] && [ $i -gt 0 ]; then
              remaining_minutes=$(((360 - i) / 30))
              echo "‚è≥ $remaining_minutes minutes remaining..."
            fi
            
            sleep 2
          done
          
          echo "‚úÖ 12 minutes monitoring completed!"
          echo "üîó Final tunnel URL: $TUNNEL_URL"
          
      # Final status and cleanup
      - name: Final Status and Cleanup
        if: always()
        run: |
          echo ""
          echo "üìä FINAL STATUS REPORT"
          echo "======================"
          
          if [ -f tunnel_url.txt ]; then
            TUNNEL_URL=$(cat tunnel_url.txt)
            echo "üîó Final Tunnel URL: $TUNNEL_URL"
            
            # Final connectivity test with and without CORS
            echo "üîç Final connectivity tests:"
            if curl -s -f --max-time 5 -H "Origin: $TUNNEL_URL" "$TUNNEL_URL/api/tags" > /dev/null 2>&1; then
              echo "  ‚úÖ Tunnel accessible WITH CORS headers"
            else
              echo "  ‚ùå Tunnel not accessible WITH CORS headers"
            fi
            
            if curl -s -f --max-time 5 "$TUNNEL_URL/api/tags" > /dev/null 2>&1; then
              echo "  ‚úÖ Tunnel accessible WITHOUT CORS headers"
            else
              echo "  ‚ùå Tunnel not accessible WITHOUT CORS headers"
            fi
          else
            echo "‚ùå No tunnel URL was generated"
          fi
          
          echo ""
          echo "üìã Process Status:"
          [ -f ollama.pid ] && kill -0 $(cat ollama.pid) 2>/dev/null && echo "  ‚Ä¢ Ollama: Running" || echo "  ‚Ä¢ Ollama: Stopped"
          [ -f cloudflared.pid ] && kill -0 $(cat cloudflared.pid) 2>/dev/null && echo "  ‚Ä¢ Cloudflared: Running" || echo "  ‚Ä¢ Cloudflared: Stopped"
          
          echo ""
          echo "üßπ Cleaning up processes..."
          [ -f ollama.pid ] && kill $(cat ollama.pid) 2>/dev/null || true
          [ -f cloudflared.pid ] && kill $(cat cloudflared.pid) 2>/dev/null || true
          
          # Force cleanup
          sleep 2
          sudo pkill -9 ollama 2>/dev/null || true
          sudo pkill -9 cloudflared 2>/dev/null || true
          
          echo "‚úÖ Cleanup completed"
          
          # Show final logs if there were issues
          if [ -f logs/ollama.log ]; then
            echo ""
            echo "üìã Final Ollama logs (last 10 lines):"
            tail -10 logs/ollama.log
          fi
