on:
  workflow_dispatch: # run manually
  repository_dispatch: # triggered by n8n via GitHub API
    types: [start_ollama]
  push:
    branches:
      - main
      
jobs:
  run-ollama:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Set reasonable timeout
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: System Setup
        run: |
          echo "üîß Setting up system..."
          sudo apt-get update -qq
          sudo apt-get install -y curl wget jq
          
      # Clean install of Ollama
      - name: Install and Configure Ollama
        run: |
          echo "üì¶ Installing Ollama..."
          
          # Clean up any existing processes
          sudo pkill -9 ollama || true
          sudo systemctl stop ollama || true
          sudo systemctl disable ollama || true
          
          # Install Ollama
          curl -fsSL https://ollama.com/install.sh | sh
          
          # Verify installation
          which ollama || (echo "‚ùå Ollama installation failed" && exit 1)
          ollama --version
          
      # Start Ollama with PROPER Cloudflare Tunnel configuration
      - name: Start Ollama Server (Cloudflare Tunnel Ready)
        run: |
          echo "üöÄ Starting Ollama server with Cloudflare Tunnel configuration..."
          
          # Create logs directory
          mkdir -p logs
          
          # CRITICAL: Configure Ollama for Cloudflare Tunnel access
          # Based on the FAQ: "How can I use Ollama with Cloudflare Tunnel?"
          # We need to bind to localhost and let cloudflared handle the host headers
          export OLLAMA_HOST="localhost:11434"
          
          # CRITICAL: Configure CORS to allow Cloudflare tunnel domains
          # Cloudflare tunnels use *.trycloudflare.com domains
          export OLLAMA_ORIGINS="https://*.trycloudflare.com,http://localhost:11434,http://127.0.0.1:11434"
          
          # Additional performance settings
          export OLLAMA_KEEP_ALIVE="15m"
          export OLLAMA_MAX_LOADED_MODELS="1"
          export OLLAMA_MAX_QUEUE="10"
          
          echo "üîß Ollama Configuration:"
          echo "  OLLAMA_HOST: $OLLAMA_HOST"
          echo "  OLLAMA_ORIGINS: $OLLAMA_ORIGINS"
          
          # Start Ollama in background
          nohup ollama serve > logs/ollama.log 2>&1 &
          echo $! > ollama.pid
          
          # Wait for Ollama to be ready with better error handling
          echo "‚è≥ Waiting for Ollama to initialize..."
          for i in {1..60}; do
            if curl -s -f http://localhost:11434/api/tags > /dev/null 2>&1; then
              echo "‚úÖ Ollama is ready on localhost:11434!"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "‚ùå Ollama failed to start within 2 minutes"
              echo "üìã Ollama logs:"
              cat logs/ollama.log
              exit 1
            fi
            echo "  Attempt $i/60..."
            sleep 2
          done
          
      # Pull and verify model
      - name: Setup Qwen3 Model
        run: |
          echo "üì• Downloading Qwen3 model..."
          export OLLAMA_HOST="localhost:11434"
          
          # Pull model with timeout
          timeout 300 ollama pull qwen3:0.6b || {
            echo "‚ùå Model download failed or timed out"
            echo "üìã Available space:"
            df -h
            echo "üìã Ollama logs:"
            tail -50 logs/ollama.log
            exit 1
          }
          
          echo "‚úÖ Model downloaded successfully"
          
      # Test Ollama locally before exposing
      - name: Test Ollama Locally
        run: |
          echo "üß™ Testing Ollama locally..."
          export OLLAMA_HOST="localhost:11434"
          
          # Test API
          echo "Testing API endpoints..."
          curl -s http://localhost:11434/api/tags | jq . || exit 1
          
          # Test generation with timeout
          echo "Testing text generation..."
          timeout 30 ollama run qwen3:0.6b "Hello! Say 'Hi' back." || {
            echo "‚ùå Local test failed"
            tail -20 logs/ollama.log
            exit 1
          }
          
          echo "‚úÖ Local tests passed"
          
      # Install Cloudflared
      - name: Install Cloudflared
        run: |
          echo "üì¶ Installing Cloudflared..."
          
          # Download and install cloudflared
          wget -q -O cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared.deb || {
            echo "‚ùå Cloudflared installation failed"
            exit 1
          }
          
          # Verify installation
          cloudflared --version
          
      # Start Cloudflare Tunnel with PROPER configuration
      - name: Create Cloudflare Tunnel (With Host Headers)
        run: |
          echo "üåê Creating Cloudflare tunnel with proper host header configuration..."
          
          # CRITICAL: Use the exact configuration from FAQ
          # "How can I use Ollama with Cloudflare Tunnel?"
          # Use --http-host-header to set the correct Host header
          nohup cloudflared tunnel --url http://localhost:11434 --http-host-header="localhost:11434" > logs/cloudflared.log 2>&1 &
          echo $! > cloudflared.pid
          
          echo "üîß Cloudflare Tunnel Configuration:"
          echo "  Target: http://localhost:11434"
          echo "  Host Header: localhost:11434"
          
          # Wait for tunnel URL with better parsing
          echo "‚è≥ Waiting for tunnel to establish..."
          for i in {1..60}; do
            if grep -q "https://.*\.trycloudflare\.com" logs/cloudflared.log; then
              TUNNEL_URL=$(grep -o 'https://[^[:space:]]*\.trycloudflare\.com' logs/cloudflared.log | head -1)
              echo "‚úÖ Tunnel established!"
              echo "üîó Tunnel URL: $TUNNEL_URL"
              echo "$TUNNEL_URL" > tunnel_url.txt
              break
            fi
            if [ $i -eq 60 ]; then
              echo "‚ùå Tunnel failed to establish"
              echo "üìã Cloudflared logs:"
              cat logs/cloudflared.log
              exit 1
            fi
            echo "  Attempt $i/60..."
            sleep 2
          done
          
      # Display connection information
      - name: Display Connection Info
        run: |
          TUNNEL_URL=$(cat tunnel_url.txt)
          echo ""
          echo "üéâ OLLAMA IS NOW PUBLICLY ACCESSIBLE!"
          echo "==========================================="
          echo "üîó Tunnel URL: $TUNNEL_URL"
          echo ""
          echo "üì° API Endpoints:"
          echo "  ‚Ä¢ List Models:    GET  $TUNNEL_URL/api/tags"
          echo "  ‚Ä¢ Generate Text:  POST $TUNNEL_URL/api/generate"
          echo "  ‚Ä¢ Chat:           POST $TUNNEL_URL/api/chat"
          echo ""
          echo "üß™ Example cURL commands:"
          echo "  # List models"
          echo "  curl '$TUNNEL_URL/api/tags'"
          echo ""
          echo "  # Generate text"
          echo "  curl -X POST '$TUNNEL_URL/api/generate' \\"
          echo "    -H 'Content-Type: application/json' \\"
          echo "    -d '{\"model\":\"qwen3:0.6b\",\"prompt\":\"Hello world!\",\"stream\":false}'"
          echo ""
          echo "  # Chat"
          echo "  curl -X POST '$TUNNEL_URL/api/chat' \\"
          echo "    -H 'Content-Type: application/json' \\"
          echo "    -d '{\"model\":\"qwen3:0.6b\",\"messages\":[{\"role\":\"user\",\"content\":\"Hello!\"}],\"stream\":false}'"
          echo ""
          echo "üîß CORS Configuration:"
          echo "  Ollama is configured to accept requests from *.trycloudflare.com"
          echo "  Host header is properly forwarded by cloudflared"
          echo "==========================================="

      # Log tunnel URL for n8n extraction
      - name: Log Tunnel URL for n8n
        run: |
          TUNNEL_URL=$(cat tunnel_url.txt)
          echo "=== N8N_EXTRACT_START ==="
          echo "TUNNEL_URL: $TUNNEL_URL"
          echo "=== N8N_EXTRACT_END ==="

      # Notify n8n webhook (conditionally)
      - name: Notify n8n Webhook
        if: env.N8N_WEBHOOK_URL != ''
        run: |
          TUNNEL_URL=$(cat tunnel_url.txt)
          echo "üì° Sending webhook notification to n8n..."
          
          # Extract data from GitHub event (if triggered by repository_dispatch)
          CHAT_ID="${{ github.event.client_payload.telegram_chat_id || 'unknown' }}"
          USER_ID="${{ github.event.client_payload.user_id || 'unknown' }}"
          ORIGINAL_MESSAGE="${{ github.event.client_payload.original_message || 'Manual start' }}"
          TIMESTAMP="${{ github.event.client_payload.timestamp || github.event.head_commit.timestamp }}"
          
          # Send webhook to n8n
          curl -X POST "$N8N_WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "{
              \"tunnel_url\": \"$TUNNEL_URL\",
              \"chat_id\": \"$CHAT_ID\",
              \"user_id\": \"$USER_ID\",
              \"original_message\": \"$ORIGINAL_MESSAGE\",
              \"timestamp\": \"$TIMESTAMP\",
              \"status\": \"ready\",
              \"github_run_id\": \"${{ github.run_id }}\",
              \"github_workflow\": \"${{ github.workflow }}\"
            }" || echo "‚ö†Ô∏è Webhook notification failed (non-critical)"
          
          echo "‚úÖ Webhook notification sent!"

      # Keep services running for 15 minutes
      - name: Keep Services Running
        run: |
          TUNNEL_URL=$(cat tunnel_url.txt)
          echo "üîÑ Keeping services running for 15 minutes..."
          echo "üîó Access your Ollama at: $TUNNEL_URL"
          
          # Run for 15 minutes (900 seconds)
          for i in {1..900}; do
            # Show status every 3 minutes (180 seconds)
            if [ $((i % 180)) -eq 0 ]; then
              minutes_elapsed=$((i / 60))
              remaining_minutes=$((15 - minutes_elapsed))
              echo "‚è∞ $minutes_elapsed/15 minutes elapsed - $remaining_minutes minutes remaining"
            fi
            sleep 1
          done
          
          echo "‚úÖ 15 minutes completed!"
          echo "üîó Final tunnel URL: $TUNNEL_URL"
          
      # Cleanup
      - name: Cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up processes..."
          [ -f ollama.pid ] && kill $(cat ollama.pid) 2>/dev/null || true
          [ -f cloudflared.pid ] && kill $(cat cloudflared.pid) 2>/dev/null || true
          sudo pkill -9 ollama 2>/dev/null || true
          sudo pkill -9 cloudflared 2>/dev/null || true
          echo "‚úÖ Cleanup completed"
